/**
 * LOC-DB Central Component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BibliographicResource } from '../model/bibliographicResource';
import { BibliographicResourceOpenCitations } from '../model/bibliographicResourceOpenCitations';
import { ErrorResponse } from '../model/errorResponse';
import { SuccessResponse } from '../model/successResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BibliographicResourceService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Deletes all (!) bibliographic resources (may be removed in a later stage)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAll(observe?: 'body', reportProgress?: boolean): Observable<SuccessResponse>;
    public deleteAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SuccessResponse>>;
    public deleteAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SuccessResponse>>;
    public deleteAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.delete<SuccessResponse>(`${this.basePath}/bibliographicResources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Deletes a single bibliographic resource by id
     * @param id The internal identifier of the bibliographic resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSingle(id: string, observe?: 'body', reportProgress?: boolean): Observable<SuccessResponse>;
    public deleteSingle(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SuccessResponse>>;
    public deleteSingle(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SuccessResponse>>;
    public deleteSingle(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSingle.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.delete<SuccessResponse>(`${this.basePath}/bibliographicResources/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a single bibliographic resource by id
     * @param id The internal identifier of the bibliographic resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get(id: string, observe?: 'body', reportProgress?: boolean): Observable<BibliographicResource>;
    public get(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BibliographicResource>>;
    public get(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BibliographicResource>>;
    public get(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<BibliographicResource>(`${this.basePath}/bibliographicResources/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a list of bibliographic resources
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public list(observe?: 'body', reportProgress?: boolean): Observable<Array<BibliographicResource>>;
    public list(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BibliographicResource>>>;
    public list(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BibliographicResource>>>;
    public list(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<Array<BibliographicResource>>(`${this.basePath}/bibliographicResources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns a list of bibliographic resources in OC format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOC(observe?: 'body', reportProgress?: boolean): Observable<Array<BibliographicResourceOpenCitations>>;
    public listOC(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BibliographicResourceOpenCitations>>>;
    public listOC(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BibliographicResourceOpenCitations>>>;
    public listOC(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<Array<BibliographicResourceOpenCitations>>(`${this.basePath}/bibliographicResourcesOC`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Saves a new bibliographic resource into the database
     * @param bibliographicResource A bibliographic resource to be saved in the database
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save(bibliographicResource: BibliographicResource, observe?: 'body', reportProgress?: boolean): Observable<BibliographicResource>;
    public save(bibliographicResource: BibliographicResource, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BibliographicResource>>;
    public save(bibliographicResource: BibliographicResource, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BibliographicResource>>;
    public save(bibliographicResource: BibliographicResource, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bibliographicResource === null || bibliographicResource === undefined) {
            throw new Error('Required parameter bibliographicResource was null or undefined when calling save.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<BibliographicResource>(`${this.basePath}/bibliographicResources`,
            bibliographicResource,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Sets a bibliographic resource to VALID, i.e. \&quot;completely linked\&quot;, given it&#39;s internal identifier. The system internally sets all bibliographic entries of the bibliographic resources to OBSOLETE that are not linked and therefore not valid. We do this in order to deal with duplicate reference extractions.
     * @param id The internal identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setValid(id: string, observe?: 'body', reportProgress?: boolean): Observable<BibliographicResource>;
    public setValid(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BibliographicResource>>;
    public setValid(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BibliographicResource>>;
    public setValid(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setValid.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<BibliographicResource>(`${this.basePath}/setValid`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Updates an existing bibliographic resource
     * @param id The _id of the bibliographic resource to be updated.
     * @param bibliographicResource A bibliographic resource to be updated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(id: string, bibliographicResource: BibliographicResource, observe?: 'body', reportProgress?: boolean): Observable<BibliographicResource>;
    public update(id: string, bibliographicResource: BibliographicResource, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BibliographicResource>>;
    public update(id: string, bibliographicResource: BibliographicResource, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BibliographicResource>>;
    public update(id: string, bibliographicResource: BibliographicResource, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }
        if (bibliographicResource === null || bibliographicResource === undefined) {
            throw new Error('Required parameter bibliographicResource was null or undefined when calling update.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<BibliographicResource>(`${this.basePath}/bibliographicResources/${encodeURIComponent(String(id))}`,
            bibliographicResource,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
