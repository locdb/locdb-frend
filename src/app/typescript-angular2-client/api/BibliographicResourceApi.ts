/**
 * LOC-DB Central Component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BibliographicResourceApi {

    protected basePath = 'https://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Get bibliographic resource by PICA-Prod-Nr.
     * @param ppn The PICA-Prod-Nr. assigned by SWB
     * @param resourceType The type of the resource
     */
    public createByPPN(ppn: string, resourceType: string, extraHttpRequestParams?: any): Observable<models.BibliographicResource> {
        return this.createByPPNWithHttpInfo(ppn, resourceType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes all (!) bibliographic resources (may be removed in a later stage)
     */
    public deleteAll(extraHttpRequestParams?: any): Observable<models.SuccessResponse> {
        return this.deleteAllWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a single bibliographic resource by id
     * @param id The internal identifier of the bibliographic resource
     */
    public deleteSingle(id: string, extraHttpRequestParams?: any): Observable<models.SuccessResponse> {
        return this.deleteSingleWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a single bibliographic resource by id
     * @param id The internal identifier of the bibliographic resource
     */
    public get(id: string, extraHttpRequestParams?: any): Observable<models.BibliographicResource> {
        return this.getWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns a list of bibliographic resources
     */
    public list(extraHttpRequestParams?: any): Observable<Array<models.BibliographicResource>> {
        return this.listWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Saves a new bibliographic resource into the database
     * @param bibliographicResource A bibliographic resource to be saved in the database
     */
    public save(bibliographicResource: models.BibliographicResource, extraHttpRequestParams?: any): Observable<models.BibliographicResource> {
        return this.saveWithHttpInfo(bibliographicResource, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Updates an existing bibliographic resource
     * @param id The _id of the bibliographic resource to be updated.
     * @param bibliographicResource A bibliographic resource to be updated
     */
    public update(id: string, bibliographicResource: models.BibliographicResource, extraHttpRequestParams?: any): Observable<models.BibliographicResource> {
        return this.updateWithHttpInfo(id, bibliographicResource, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * Get bibliographic resource by PICA-Prod-Nr.
     * @param ppn The PICA-Prod-Nr. assigned by SWB
     * @param resourceType The type of the resource
     */
    public createByPPNWithHttpInfo(ppn: string, resourceType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/createBibliographicResourceByPPN';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ppn' is not null or undefined
        if (ppn === null || ppn === undefined) {
            throw new Error('Required parameter ppn was null or undefined when calling createByPPN.');
        }
        // verify required parameter 'resourceType' is not null or undefined
        if (resourceType === null || resourceType === undefined) {
            throw new Error('Required parameter resourceType was null or undefined when calling createByPPN.');
        }
        if (ppn !== undefined) {
            queryParameters.set('ppn', <any>ppn);
        }

        if (resourceType !== undefined) {
            queryParameters.set('resourceType', <any>resourceType);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Deletes all (!) bibliographic resources (may be removed in a later stage)
     */
    public deleteAllWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bibliographicResources';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Deletes a single bibliographic resource by id
     * @param id The internal identifier of the bibliographic resource
     */
    public deleteSingleWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bibliographicResources/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSingle.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns a single bibliographic resource by id
     * @param id The internal identifier of the bibliographic resource
     */
    public getWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bibliographicResources/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns a list of bibliographic resources
     */
    public listWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bibliographicResources';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Saves a new bibliographic resource into the database
     * @param bibliographicResource A bibliographic resource to be saved in the database
     */
    public saveWithHttpInfo(bibliographicResource: models.BibliographicResource, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bibliographicResources';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'bibliographicResource' is not null or undefined
        if (bibliographicResource === null || bibliographicResource === undefined) {
            throw new Error('Required parameter bibliographicResource was null or undefined when calling save.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: bibliographicResource == null ? '' : JSON.stringify(bibliographicResource), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Updates an existing bibliographic resource
     * @param id The _id of the bibliographic resource to be updated.
     * @param bibliographicResource A bibliographic resource to be updated
     */
    public updateWithHttpInfo(id: string, bibliographicResource: models.BibliographicResource, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/bibliographicResources/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }
        // verify required parameter 'bibliographicResource' is not null or undefined
        if (bibliographicResource === null || bibliographicResource === undefined) {
            throw new Error('Required parameter bibliographicResource was null or undefined when calling update.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: bibliographicResource == null ? '' : JSON.stringify(bibliographicResource), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
