/**
 * LOC-DB Central Component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ScanApi {

    protected basePath = 'https://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Returns a single scan by id
     * @param id The internal identifier of the scan
     */
    public get(id: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieves the BRs including their associated parts and scans that are either not processed or processed by the OCR-component or retrieved from external.
     * @param status The status for which the ToDo-list shall be retrieved
     */
    public getToDo(status: string, extraHttpRequestParams?: any): Observable<Array<models.ToDo>> {
        return this.getToDoWithHttpInfo(status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a single scan by id
     * @param id The internal identifier of the scan
     */
    public remove(id: string, extraHttpRequestParams?: any): Observable<models.SuccessResponse> {
        return this.removeWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Saves a bibliographic Resource given it's identifier and resourceType as well as additional information
     * @param identifierScheme The scheme of the identifier of the resource
     * @param identifierLiteralValue The literal value of the identifier of the resource
     * @param resourceType The type of the resource.
     * @param firstPage The number of the first page of the resource (for journal articles, book chapters etc).
     * @param lastPage The number of the last page of the resource.
     * @param textualPdf Whether the references file (if given) is a PDF with textual content
     * @param binaryFile The reference page (binary file)
     * @param stringFile The reference page (string), e.g. the html code of an online reference page
     * @param embodimentType The embodiment type (PRINT or DIGITAL) of the resource
     */
    public saveResource(identifierScheme: string, identifierLiteralValue: string, resourceType: string, firstPage?: number, lastPage?: number, textualPdf?: boolean, binaryFile?: any, stringFile?: string, embodimentType?: string, extraHttpRequestParams?: any): Observable<models.BibliographicResource> {
        return this.saveResourceWithHttpInfo(identifierScheme, identifierLiteralValue, resourceType, firstPage, lastPage, textualPdf, binaryFile, stringFile, embodimentType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Send a processing request to the OCR component.
     * @param id The unique id of the scan which should be send to the OCR component
     */
    public triggerOcrProcessing(id: string, extraHttpRequestParams?: any): Observable<models.BibliographicResource> {
        return this.triggerOcrProcessingWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * Returns a single scan by id
     * @param id The internal identifier of the scan
     */
    public getWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/scans/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieves the BRs including their associated parts and scans that are either not processed or processed by the OCR-component or retrieved from external.
     * @param status The status for which the ToDo-list shall be retrieved
     */
    public getToDoWithHttpInfo(status: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/getToDo';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getToDo.');
        }
        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Deletes a single scan by id
     * @param id The internal identifier of the scan
     */
    public removeWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/scans/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Saves a bibliographic Resource given it&#39;s identifier and resourceType as well as additional information
     * @param identifierScheme The scheme of the identifier of the resource
     * @param identifierLiteralValue The literal value of the identifier of the resource
     * @param resourceType The type of the resource.
     * @param firstPage The number of the first page of the resource (for journal articles, book chapters etc).
     * @param lastPage The number of the last page of the resource.
     * @param textualPdf Whether the references file (if given) is a PDF with textual content
     * @param binaryFile The reference page (binary file)
     * @param stringFile The reference page (string), e.g. the html code of an online reference page
     * @param embodimentType The embodiment type (PRINT or DIGITAL) of the resource
     */
    public saveResourceWithHttpInfo(identifierScheme: string, identifierLiteralValue: string, resourceType: string, firstPage?: number, lastPage?: number, textualPdf?: boolean, binaryFile?: any, stringFile?: string, embodimentType?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/saveResource';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'identifierScheme' is not null or undefined
        if (identifierScheme === null || identifierScheme === undefined) {
            throw new Error('Required parameter identifierScheme was null or undefined when calling saveResource.');
        }
        // verify required parameter 'identifierLiteralValue' is not null or undefined
        if (identifierLiteralValue === null || identifierLiteralValue === undefined) {
            throw new Error('Required parameter identifierLiteralValue was null or undefined when calling saveResource.');
        }
        // verify required parameter 'resourceType' is not null or undefined
        if (resourceType === null || resourceType === undefined) {
            throw new Error('Required parameter resourceType was null or undefined when calling saveResource.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (identifierScheme !== undefined) {
            formParams.set('identifierScheme', <any>identifierScheme);
        }

        if (identifierLiteralValue !== undefined) {
            formParams.set('identifierLiteralValue', <any>identifierLiteralValue);
        }

        if (firstPage !== undefined) {
            formParams.set('firstPage', <any>firstPage);
        }

        if (lastPage !== undefined) {
            formParams.set('lastPage', <any>lastPage);
        }

        if (textualPdf !== undefined) {
            formParams.set('textualPdf', <any>textualPdf);
        }

        if (binaryFile !== undefined) {
            formParams.set('binaryFile', <any>binaryFile);
        }

        if (stringFile !== undefined) {
            formParams.set('stringFile', <any>stringFile);
        }

        if (embodimentType !== undefined) {
            formParams.set('embodimentType', <any>embodimentType);
        }

        if (resourceType !== undefined) {
            formParams.set('resourceType', <any>resourceType);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Send a processing request to the OCR component.
     * @param id The unique id of the scan which should be send to the OCR component
     */
    public triggerOcrProcessingWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/triggerOcrProcessing';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling triggerOcrProcessing.');
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'image/png',
            'application/pdf'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
